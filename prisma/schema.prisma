// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String   @id @default(uuid())
  whatsappNumber    String   @unique @map("whatsapp_number")
  countryCode       String   @map("country_code")
  status            UserStatus @default(PENDING_KYC)
  kycNftTokenId     String?  @map("kyc_nft_token_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  kycData           KycData[]
  wallets           Wallet[]
  sentTransactions  Transaction[] @relation("SentTransactions")

  @@map("users")
}

model KycData {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  documentType        DocumentType @map("document_type")
  documentNumber      String   @map("document_number")
  fullName            String   @map("full_name")
  dateOfBirth         DateTime @map("date_of_birth")
  address             String
  ipfsHash            String   @unique @map("ipfs_hash")
  verificationStatus  VerificationStatus @default(PENDING) @map("verification_status")
  verifiedAt          DateTime? @map("verified_at")
  createdAt           DateTime @default(now()) @map("created_at")

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kyc_data")
}

model Wallet {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  walletAddress       String   @unique @map("wallet_address")
  privateKeyEncrypted String   @map("private_key_encrypted")
  walletType          WalletType @default(GENERATED) @map("wallet_type")
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id                    String   @id @default(uuid())
  senderId              String   @map("sender_id")
  recipientPhone        String   @map("recipient_phone")
  sourceCurrency        String   @map("source_currency")
  targetCurrency        String   @map("target_currency")
  sourceAmount          Decimal  @map("source_amount")
  targetAmount          Decimal  @map("target_amount")
  exchangeRate          Decimal  @map("exchange_rate")
  feeAmount             Decimal  @map("fee_amount")
  totalAmount           Decimal  @map("total_amount")
  status                TransactionStatus @default(PENDING)
  blockchainTxHash      String?  @map("blockchain_tx_hash")
  recipientBankAccount  String?  @map("recipient_bank_account")
  createdAt             DateTime @default(now()) @map("created_at")
  completedAt           DateTime? @map("completed_at")

  sender                User     @relation("SentTransactions", fields: [senderId], references: [id])

  @@map("transactions")
}

enum UserStatus {
  PENDING_KYC
  VERIFIED
  SUSPENDED
}

enum DocumentType {
  E_KTP
  PASSPORT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum WalletType {
  GENERATED
  IMPORTED
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
